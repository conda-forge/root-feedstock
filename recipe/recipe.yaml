context:
  name: root
  tag_name: 6-36-04
  build_number: 4
  clang_version: 18.1.8
  clang_patches_version: root_63604
  builtin_clang: false
  run_gtests: false
  # When new Python versions are released numba tends to be slow to support them
  # to prevent ROOT from being held up by this, only have a strong dependency on
  # numba for supported python versions
  unsupported_numba_pyversion: 3.14
  root_cxx_standard: 20

recipe:
  name: root
  version: ${{ tag_name | replace("-", ".") }}

source:
  url: https://github.com/root-project/root/archive/refs/tags/v${{ tag_name }}.tar.gz
  sha256: 65a246d2578d2f04f7ad400a26cfc6c7c9c19878434a3d8f4d0bcf7deec4f2ec
  target_directory: root-source
  patches:
    - patches/0001-disable-cling-sysroot-at-runtime.patch
    - patches/0002-Hint-to-external-LLVM-and-Clang-on-Conda.patch
    - patches/0003-Set-LLVM_REQUIRES_EH-for-Cling.patch
    - patches/0004-asimage-cross-compilation-fix.patch
    - patches/0005-Detect-which-ar-binary-should-be-used-to-build-libAf.patch
    - if: build_platform != target_platform
      then:
        - patches/0006-HACK-Support-overriding-triplet-used-by-cling.patch
        - patches/0007-Disable-hsimple.root-generation-if-cross-compiling.patch
    - if: osx
      then:
        - patches/0008-disable-builtin-freetype-macos.patch
        - patches/0009-avoid-linking-TPython-against-libPython.patch
        - patches/0010-root-x.xx.xx-osx-remove-hardcoded-sysroot.patch
        - patches/0011-Remove-bad-check-on-SDK-for-std_darwin.MacOSX14.2.sd.patch
        - patches/0012-build-Fix-script-for-conda-MacOS.patch
build:
  number: ${{ build_number }}
  skip:
    - win

outputs:
  - package:
      name: root_base
    build:
      script:
        file: build_root.sh
        env:
          clang_version: ${{ clang_version }}
          clang_patches_version: ${{ clang_patches_version }}
          ROOT_CXX_STANDARD: ${{ root_cxx_standard }}
      dynamic_linking:
        overdepending_behavior: ignore
      prefix_detection:
        ignore:
          - if: aarch64
            then: etc/allDict.cxx.pch
            else: lib/*.pcm
      files:
        include:
          - "**"
        exclude:
          - LICENSE
          - README/**
    requirements:
      build:
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
        - ${{ stdlib("c") }}
        - autoconf
        - cmake
        - git
        - pkg-config
        - sed
        - make
        - ninja
        - zeromq
        - if: unix
          then: gnuconfig
        - if: build_platform != target_platform
          then:
            - cross-python_${{ target_platform }}
            - python
            - numpy
            - xxhash
            - zlib
            - zstd
            - freetype
            - liblzma-devel
            - llvm ${{ clang_version }}.* ${{ clang_patches_version }}*
            - llvm-openmp ${{ clang_version }}.*
            - llvmdev ${{ clang_version }}.* ${{ clang_patches_version }}*
            - clangdev ${{ clang_version }}.* ${{ clang_patches_version }}*
      host:
        - libblas
        - libcblas
        - if: linux
          then:
            - ${{ compiler('c') }}
            - ${{ compiler('cxx') }}
            - libglu
            - libgl-devel
            - xorg-xorgproto
            - xorg-libx11
            - xorg-libxau
            - xorg-libxcursor
            - xorg-libxext
            - xorg-libxfixes
            - xorg-libxft
            - xorg-libxpm
        - ${{ stdlib("c") }}
        - cfitsio
        - davix
        - fftw
        - freetype
        - ftgl
        - gdk-pixbuf
        - giflib
        - glew
        - glib
        - gl2ps
        - graphviz
        - gsl
        - gtest
        - libpng
        - librsvg
        - libtiff
        - libxml2
        - lz4-c
        # - mysql
        - nlohmann_json
        - openssl
        - pcre
        # - postgresql
        - pythia8
        - sqlite
        - tbb
        - tbb-devel
        - vector-classes
        - vdt
        - python
        - numpy
        - xrootd
        - liblzma-devel
        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used
        - xxhash
        - zlib
        - zstd
        # Required for roofit_multiprocess
        - cppzmq
        # Required zmq_ppoll API added in v4.3.5
        - zeromq
        # Need to request drafts API
        # Note that zeromq and zeromq * drafts_* are both required
        # c.f. https://github.com/conda-forge/root-feedstock/pull/292#discussion_r2334082389
        - zeromq * drafts_*
        - llvm ${{ clang_version }}.* ${{ clang_patches_version }}*
        - llvm-openmp ${{ clang_version }}.*
        - llvmdev ${{ clang_version }}.* ${{ clang_patches_version }}*
        - clangdev ${{ clang_version }}.* ${{ clang_patches_version }}*
      run:
        - python
        - numpy
        # FIXME: Required to ensure a consistent etc/allDict.cxx.pch
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
        - ${{ stdlib("c") }}
        - ${{ pin_compatible('xxhash', upper_bound='x.x.x') }}
        - ${{ pin_compatible('nlohmann_json', upper_bound='x.x.x') }}
        - cffi
        - graphviz
        - if: linux
          then:
            - xorg-xorgproto
            - xorg-libx11
            - xorg-libxext
            - xorg-libxpm
            - xorg-libxft
            - libglu
      run_constraints:
        - numba >=0.52
        - cling ==9999
        - root5 ==9999
        - afterimage ==9999
      run_exports:
        - ${{ pin_subpackage('root_base', upper_bound='x.x.x') }}
    tests:
      - files:
          recipe:
            - test.cpp
        script:
          - root -l -b -q -x
          - root -l -b -q -x test.cpp
          - "root -b -l -q -x -e '2+3; 0'"
          - "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'"
          - "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); TCanvas c; if (!c.UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'"
          - "root -b -l -q -x \"${PREFIX}/tutorials/analysis/tree/run_h1analysis.C\""
          - if: not ppc64le
            then: "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.AsNumpy(['H1_PX']))\""
          - root -l -b -q -x test.cpp++
          - if: not (osx and arm64) and build_platform == target_platform
            then: "echo '.q' | root -e 'sddsa0'"

  - package:
      name: root
    requirements:
      host:
        - ${{ pin_subpackage('root_base', exact=True) }}
        - python
      run:
        - ${{ pin_subpackage('root_base', exact=True) }}
        - python
        - compilers  # This package is hostile to how conda-build manages compilers
        - metakernel
        - ipython
        - notebook
        - if: python < unsupported_numba_pyversion
          then: numba
    tests:
      - python:
          imports:
            - ROOT
            - JupyROOT
          pip_check: false
      - files:
          recipe:
            - test.cpp
            - test_pyroot.py
            - test_roofit_multiprocess.py
        script:
          - python test_pyroot.py
          - python test_roofit_multiprocess.py
          - python ${PREFIX}/tutorials/analysis/dataframe/df038_NumbaDeclare.py
          - root -l -b -q -x test.cpp
          - "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'"
          - "root -b -l -q -x \"${PREFIX}/tutorials/analysis/tree/run_h1analysis.C\""
          - root -l -b -q -x test.cpp++
          - "jupyter-kernelspec list | grep ' root '"

about:
  license: LGPL-2.1-only
  license_file: root-source/LICENSE
  summary: |
    ROOT is a unified software package for the storage, processing, and analysis of scientific data: from its
    acquisition to the final visualization in form of highly customizable, publication-ready plots. It is reliable,
    performant and well supported, easy to use and obtain, and strives to maximize the quantity and impact of scientific
    results obtained per unit cost, both of human effort and computing resources. ROOT is performance critical software
    written in C++ and enables rapid prototyping powered by a unique C++ compliant interpreter called Cling. Cling also
    enables performant C++ type introspection which is a building block of automatic interoperability with Python.
    Thanks to its dynamic Python bindings, leveraging the cppyy technology, ROOT offers efficient, on-demand C++/Python
    interoperability in a uniform cross-language execution environment.
  description: |
    While the feature set of the ROOT framework is vast and not everything can be supported in the conda distribution,
    this package aims at enabling most of the features of ROOT. Here are a few things to try:

    * `root`: you can start up a session and see the splash screen; Control-D to exit.
    * `python` followed by `import ROOT` to access all ROOT functionalities via the Python bindings.
    * `root --notebook` will start a notebook server with a ROOT kernel choice.
    * `rootbrowse` will open a TBrowser session so you can look through files.
    * `root -b -q -l $ROOTSYS/tutorials/analysis/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.
    * `root -b -q -l -n -e "std::cout << TROOT::GetTutorialDir() << std::endl;"` will print the tutorial dir.

    See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.

    The ROOT package will prepare the required compilers. Everything in Conda is symlinked into
    `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically.

    There is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid
    having a runtime dependency on the `compilers` package. In most cases users should use the `root` package directly,
    since it adds more features (taking care of their dependencies) to facilitate usage of the ROOT Python bindings.

  homepage: https://root.cern/
  repository: https://github.com/root-project/root/
  documentation: https://root.cern/documentation

extra:
  recipe-maintainers:
    - vepadulano
    - chrisburr
    - henryiii
    - duncanmmacleod
