From ad32701f7edf70cf6ff844f2cc200c2632936095 Mon Sep 17 00:00:00 2001
From: Chris Burr <christopher.burr@cern.ch>
Date: Wed, 5 Mar 2025 21:30:43 +0100
Subject: [PATCH] Remove _GLIBCXX_USE_FLOAT128

---
 .../cling/lib/Interpreter/CIFactory.cpp       | 21 -------------------
 1 file changed, 21 deletions(-)

diff --git a/interpreter/cling/lib/Interpreter/CIFactory.cpp b/interpreter/cling/lib/Interpreter/CIFactory.cpp
index fd41fd5bbb..66514fa772 100644
--- a/interpreter/cling/lib/Interpreter/CIFactory.cpp
+++ b/interpreter/cling/lib/Interpreter/CIFactory.cpp
@@ -452,27 +452,6 @@ namespace {
     }
 
     if (CompilerOpts.DefaultLanguage(&Opts)) {
-#if _GLIBCXX_USE_FLOAT128
-      // We are compiling with libstdc++ with __float128 enabled.
-      if (!Target.hasFloat128Type()) {
-        // clang currently supports native __float128 only on few targets, and
-        // this target does not have it. The most visible consequence of this is
-        // a specialization
-        //    __is_floating_point_helper<__float128>
-        // in include/c++/6.3.0/type_traits:344 that clang then rejects. The
-        // specialization is protected by !if _GLIBCXX_USE_FLOAT128 (which is
-        // unconditionally set in c++config.h) and #if !__STRICT_ANSI__. Tweak
-        // the latter by disabling GNUMode.
-        // the nvptx backend doesn't support 128 bit float
-        // a error message is not necessary
-        if(!CompilerOpts.CUDADevice) {
-          cling::errs()
-            << "Disabling gnu++: "
-               "clang has no __float128 support on this target!\n";
-        }
-        Opts.GNUMode = 0;
-      }
-#endif //_GLIBCXX_USE_FLOAT128
     }
     // Set char signedness to match how this file is built, i.e. flags like
     // -f(no-)(un)signed-char.
-- 
2.45.0

