From 55098235c7eb8ea7fa8b1a2999a01df689c41d69 Mon Sep 17 00:00:00 2001
From: Chris Burr <christopher.burr@cern.ch>
Date: Wed, 12 Mar 2025 09:27:48 +0100
Subject: [PATCH 7/8] HACK: Fix cling target for cross-compilation

---
 .../cling/lib/Interpreter/CIFactory.cpp       | 20 +++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/interpreter/cling/lib/Interpreter/CIFactory.cpp b/interpreter/cling/lib/Interpreter/CIFactory.cpp
index 983e1e792f..6dc35aef3e 100644
--- a/interpreter/cling/lib/Interpreter/CIFactory.cpp
+++ b/interpreter/cling/lib/Interpreter/CIFactory.cpp
@@ -283,6 +283,11 @@ namespace {
 
         SmallString<2048> buffer;
 
+        // Allow an envrionment variable to override the default compiler path
+        if (std::getenv("CLING_CXX_PATH"))
+          ReadCompilerIncludePaths(std::getenv("CLING_CXX_PATH"), buffer, sArguments, Verbose);
+
+        if (sArguments.empty()) {
   #ifdef _LIBCPP_VERSION
         // Try to use a version of clang that is located next to cling
         // in case cling was built with a new/custom libc++
@@ -302,6 +307,7 @@ namespace {
           ReadCompilerIncludePaths(clang.c_str(), buffer, sArguments, Verbose);
         }
   #endif // _LIBCPP_VERSION
+        }
 
   // First try the relative path 'g++'
   #ifdef CLING_CXX_RLTV
@@ -1263,9 +1269,8 @@ namespace {
     bool profilingEnabled =
         cling::utils::ConvertEnvValueToBool(std::getenv("CLING_PROFILE"));
 
-#if __APPLE__ && __arm64__
-    argvCompile.push_back("--target=arm64-apple-darwin20.3.0");
-#endif
+    argvCompile.push_back("--target=TODO_OVERRIDE_TARGET");
+
 #if __aarch64__
     // Disable outline-atomics on AArch64; the routines __aarch64_* are defined
     // in the static library libgcc.a and not necessarily included in libCling
@@ -1415,10 +1420,17 @@ namespace {
       return nullptr;
     }
 
-    llvm::Triple TheTriple(llvm::sys::getProcessTriple());
+    llvm::Triple TheTriple("TODO_OVERRIDE_TARGET");
     clang::driver::Driver Drvr(argv[0], TheTriple.getTriple(), *Diags);
     //Drvr.setWarnMissingInput(false);
     Drvr.setCheckInputsExist(false); // think foo.C(12)
+    if (COpts.Verbose) {
+      cling::log() << "Compiler command line: ";
+      for (const auto& arg : argvCompile) {
+        cling::log() << arg << " ";
+      }
+      cling::log() << "\n";
+    }
     llvm::ArrayRef<const char*>RF(&(argvCompile[0]), argvCompile.size());
     std::unique_ptr<clang::driver::Compilation>
       Compilation(Drvr.BuildCompilation(RF));
-- 
2.45.0

