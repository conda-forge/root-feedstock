{% set name = "root" %}
{% set version = "6.22.0" %}
{% set build_number = 0 %}
{% set clang_version = "5.0.0" %}
{% set clang_patches_version = "root_20200518" %}

# WARNING: This is not a good example of a how a conda forge recipe should look

{% macro test_commands() %}
        - root -l -b -q -x
        - root -l -b -q -x test.cpp
        # When testing with -e, explicitly set the return code to zero
        - root -b -l -q -x -e '2+3; 0'
        - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'
        - echo ${CONDA_BUILD_SYSROOT}  # [osx]
        # # There should be no hard coded references to the SDK
        # Check the thisroot scripts work
        - thisroot.sh
        - thisroot.csh
        - thisroot.fish
        # Test if OpenGL is working
        - root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error("OpenGL does not appear to be working"); }'
        # This test will fail due to lack of graphics support but try it anyway
        # It should exit with "TEveException: TEveManager::Create ROOT is running in batch mode."
        - root -b -l -q -x "${ROOTSYS}/tutorials/eve/geom_lhcb.C" || true
        # This tutorial uses davix to access a ROOT file over HTTP
        - root -b -l -q -x "${ROOTSYS}/tutorials/tree/run_h1analysis.C"
        - python -c "import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())"
        - python test_pyroot.py
{% endmacro -%}

package:
  name: root
  version: {{ version }}

source:
  # git_url: {{ os.environ.get("ROOT_JENKINS_GIT_URL", "https://github.com/root-project/root.git") }}
  # git_rev: v6-22-00-patches
  url: https://github.com/root-project/root/archive/v{{ '-'.join(version.split('.')[:-1] + [version.split('.')[-1].rjust(2, '0')]) }}.tar.gz
  sha256: 658b7ae68cc0de3c6027e7342c206cdcd02ef1f1660cf96ae2a84f5b6bbb95db
  folder: root-source
  patches:
    - patches/root-x.xx.xx_cling-runtime-sysroot.patch
    - patches/root-x.xx.xx-copy-abspath-headers.patch  # [osx]
    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]
    # https://sft.its.cern.ch/jira/browse/ROOT-10812
    - patches/0001-Patch-clad-build-for-use-with-external-clang.patch
    - patches/0002-Fix-DynamicLibraryManagerSymbol-for-external-LLVM.patch

build:
  number: {{ build_number }}
  skip: True  # [win]
  string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}

# Required for conda to generate the correct build matrix
requirements:
  build:
{%- if "ROOT_USE_CCACHE" in os.environ %}
    - ccache
{%- endif %}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    - cmake
    - git
    - pkg-config
    - sed
    - make
    # Required for OpenGL support
    # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
  host:
    - libblas
    - libcblas
    - {{ compiler('c') }}  # [linux]
    - {{ compiler('cxx') }}  # [linux]
    - {{ compiler('fortran') }}  # [linux]
    - numpy
    - afterimage
    - cfitsio
    - clangdev ={{ clang_version }}
    - clang_variant * {{ clang_patches_version }}
    - davix
    - fftw
    - freetype
    - ftgl
    - gdk-pixbuf
    - giflib
    - glew
    - gl2ps
    - graphviz
    - gsl
    - libglu  # [linux]
    - libpng
    - librsvg
    - libtiff
    - libxml2
    - llvmdev ==5
    - lz4-c
    # - mysql
    - openssl
    - pcre
    # - postgresql
    - pythia8
    - python
    - sqlite
    - tbb
    - tbb-devel
    - vdt
    - xorg-libx11  # [linux]
    - xorg-libxau  # [linux]
    - xorg-libxcursor  # [linux]
    - xorg-libxext  # [linux]
    - xorg-libxfixes  # [linux]
    - xorg-libxft  # [linux]
    - xorg-libxpm  # [linux]
    - xrootd
    - xz
    # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used
    - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
    - xxhash
    - zlib
    - zstd
  run:
    - python
    - numba
    - cffi
  run_constrained:
    - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx]

outputs:
  - name: root-dependencies
    build:
      number: {{ build_number }}
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}
      skip: True  # [win]
      script: echo "Minimal build script is required for conda to set RECIPE_DIR"
    requirements:
      # Include the build dependencies to ensure the build string is correct
      build:
{%- if "ROOT_USE_CCACHE" in os.environ %}
        - ccache
{%- endif %}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - cmake
        - git
        - pkg-config
        - sed
        - make
        # Required for OpenGL support
        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl
        - {{ cdt('mesa-libgl-devel') }}  # [linux]
        - {{ cdt('mesa-dri-drivers') }}  # [linux]
        - {{ cdt('libselinux') }}  # [linux]
        - {{ cdt('libxdamage') }}  # [linux]
        - {{ cdt('libxxf86vm') }}  # [linux]
      # Include the host dependencies so we pick up any pinning and run_exports
      host:
        - libblas
        - libcblas
        - {{ compiler('c') }}  # [linux]
        - {{ compiler('cxx') }}  # [linux]
        - {{ compiler('fortran') }}  # [linux]
        - numpy
        - afterimage
        - cfitsio
        - clangdev ={{ clang_version }}
        - clang_variant * {{ clang_patches_version }}
        - davix
        - fftw
        - freetype
        - ftgl
        - gdk-pixbuf
        - giflib
        - glew
        - gl2ps
        - graphviz
        - gsl
        - libglu  # [linux]
        - libpng
        - librsvg
        - libtiff
        - libxml2
        - llvmdev ==5
        - lz4-c
        # - mysql
        - openssl
        - pcre
        # - postgresql
        - pythia8
        - python
        - sqlite
        - tbb
        - tbb-devel
        - vdt
        - xorg-libx11  # [linux]
        - xorg-libxau  # [linux]
        - xorg-libxcursor  # [linux]
        - xorg-libxext  # [linux]
        - xorg-libxfixes  # [linux]
        - xorg-libxft  # [linux]
        - xorg-libxpm  # [linux]
        - xrootd
        - xz
        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used
        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
        - xxhash
        - zlib
        - zstd
      run:
        - {{ pin_compatible('numpy') }}
        - cfitsio
        - fftw
        - gdk-pixbuf
        - glew
        - gl2ps
        - graphviz
        - libglu  # [linux]
        - librsvg
        - pythia8
        - python
        - tbb-devel
        - xorg-libx11  # [linux]
        - xorg-libxau  # [linux]
        - xorg-libxcursor  # [linux]
        - xorg-libxext  # [linux]
        - xorg-libxft  # [linux]
        - xorg-libxpm  # [linux]
        # FIXME: Required to ensure a consistent etc/allDict.cxx.pch
        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}
      run_constrained:
        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx]
    test:
      commands:
        - echo "Testing is performed in the root_base and root outputs"

  # An underscore is required here to ensure it is built after root-dependencies (required for testing)
  - name: root_base
    build:
      number: {{ build_number }}
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}
      skip: True  # [win]
      script:
        - set -euxo pipefail
        - find ${PREFIX}/bin -type f -maxdepth 1 > ${SRC_DIR}/initial-filelist.txt
        - cp -rp ${PREFIX}/bin ${SRC_DIR}/initial-bin-dir
        # Copy the new files in ${PREFIX}/bin to a dedicated directory
{%- for key, value in os.environ.items() %}
  {%- if key.startswith("ROOT_") %}
        - export {{ key }}={{ value }}
  {%- endif %}
{%- endfor %}
        - ${RECIPE_DIR}/build_root-base.sh
        - mkdir ${SRC_DIR}/root-binaries/
        - |
          find ${PREFIX}/bin -type f -maxdepth 1 -exec \
            bash -c 'fn={}; if grep --quiet "^$fn\$" "${SRC_DIR}/initial-filelist.txt"; then echo "Skipping $fn"; else echo "Found new file $fn"; mv "$fn" "${SRC_DIR}/root-binaries/"; fi' \;
      run_exports:
        # https://abi-laboratory.pro/?view=timeline&l=root
        - {{ pin_subpackage('root_base', max_pin='x.x') }}
      ignore_prefix_files:
        - lib/*.pcm
      # Taken from "conda render ./recipe/ -m .ci_support/osx_python3.7.yaml"
      # Sorted and commented run_exports that we want to keep
      # TODO: This will need updating occasionally
      ignore_run_exports:
        # - afterimage
        # - davix
        # - freetype
        - ftgl
        - gl2ps
        - giflib
        - gsl
        - krb5
        # - libblas
        # - libcblas
        # - libcxx
        # - libgfortran
        # - libpng
        # - libtiff
        # - libxml2
        # - lz4-c
        # - openssl
        # - pcre
        - sqlite
        # - tbb
        # - vdt
        # - xrootd
        # - xz
    requirements:
      build:
{%- if "ROOT_USE_CCACHE" in os.environ %}
        - ccache
{%- endif %}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - cmake
        - git
        - pkg-config
        - sed
        - make
        # Required for OpenGL support
        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl
        - {{ cdt('mesa-libgl-devel') }}  # [linux]
        - {{ cdt('mesa-dri-drivers') }}  # [linux]
        - {{ cdt('libselinux') }}  # [linux]
        - {{ cdt('libxdamage') }}  # [linux]
        - {{ cdt('libxxf86vm') }}  # [linux]
      host:
        - libblas
        - libcblas
        - {{ compiler('c') }}  # [linux]
        - {{ compiler('cxx') }}  # [linux]
        - {{ compiler('fortran') }}  # [linux]
        - numpy
        - afterimage
        - cfitsio
        - clangdev ={{ clang_version }}
        - clang_variant * {{ clang_patches_version }}
        - davix
        - fftw
        - freetype
        - ftgl
        - gdk-pixbuf
        - giflib
        - glew
        - gl2ps
        - graphviz
        - gsl
        - libglu  # [linux]
        - libpng
        - librsvg
        - libtiff
        - libxml2
        - llvmdev ==5
        - lz4-c
        # - mysql
        - openssl
        - pcre
        # - postgresql
        - pythia8
        - python
        - sqlite
        - tbb
        - tbb-devel
        - vdt
        - xorg-libx11  # [linux]
        - xorg-libxau  # [linux]
        - xorg-libxcursor  # [linux]
        - xorg-libxext  # [linux]
        - xorg-libxfixes  # [linux]
        - xorg-libxft  # [linux]
        - xorg-libxpm  # [linux]
        - xrootd
        - xz
        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used
        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
        - xxhash
        - zlib
        - zstd
      run:
        # FIXME: Required to ensure a consistent etc/allDict.cxx.pch
        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
        - python
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}
        - {{ pin_compatible('numpy') }}
        - numba
        - cffi
      run_constrained:
        # Items listed here conflict with ROOT
        # FIXME Add support in ROOT for building with an external cling
        - cling 9999
        - root5 9999
        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx]
    test:
      commands:
        - echo "Tested in other outputs"

  - name: root-binaries
    build:
      number: {{ build_number }}
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}
      skip: True  # [win]
      script:
        - set -euxo pipefail
        # Copy the executables back into ${PREFIX}/bin
        # This is done to avoid users getting broken binaries from root_base
        - mkdir -p ${PREFIX}/bin
        - ls ${PREFIX}/bin/
        - cp -rp ${SRC_DIR}/root-binaries/* ${PREFIX}/bin/
        - ls ${PREFIX}/bin/
    requirements:
      build:
{%- if "ROOT_USE_CCACHE" in os.environ %}
        - ccache
{%- endif %}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - cmake
        - git
        - pkg-config
        - sed
        - make
        # Required for OpenGL support
        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl
        - {{ cdt('mesa-libgl-devel') }}  # [linux]
        - {{ cdt('mesa-dri-drivers') }}  # [linux]
        - {{ cdt('libselinux') }}  # [linux]
        - {{ cdt('libxdamage') }}  # [linux]
        - {{ cdt('libxxf86vm') }}  # [linux]
      # Have to copy the host dependencies in order to be able to also install root_base
      host:
        - libblas
        - libcblas
        - {{ compiler('c') }}  # [linux]
        - {{ compiler('cxx') }}  # [linux]
        - {{ compiler('fortran') }}  # [linux]
        - numpy
        - afterimage
        - cfitsio
        # These not required as they're are statically linked in libCling. They also cannot
        # be installed in the same environment as root_base due to the compiler constraint
        # - clangdev ={{ clang_version }}
        # - clang_variant * {{ clang_patches_version }}
        # - llvmdev ==5
        - davix
        - fftw
        - freetype
        - ftgl
        - gdk-pixbuf
        - giflib
        - glew
        - gl2ps
        - graphviz
        - gsl
        - libglu  # [linux]
        - libpng
        - librsvg
        - libtiff
        - libxml2
        - lz4-c
        # - mysql
        - openssl
        - pcre
        # - postgresql
        - pythia8
        - python
        - sqlite
        - tbb
        - tbb-devel
        - vdt
        - xorg-libx11  # [linux]
        - xorg-libxau  # [linux]
        - xorg-libxcursor  # [linux]
        - xorg-libxext  # [linux]
        - xorg-libxfixes  # [linux]
        - xorg-libxft  # [linux]
        - xorg-libxpm  # [linux]
        - xrootd
        - xz
        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used
        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
        - {{ pin_subpackage('root_base', exact=True) }}
        - xxhash
        - zlib
        - zstd
      run:
        - {{ pin_subpackage('root_base', exact=True) }}
        - python
        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}
        - {{ pin_compatible('numpy') }}
        - numba
        - cffi
      run_constrained:
        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx]
    test:
      files:
        - test.cpp
        - test_pyroot.py
      requires:
        - root-dependencies {{ version }} *_{{ build_number }}
      commands: {{ test_commands() }}

  - name: root
    build:
      number: {{ build_number }}
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}
      skip: True  # [win]
      script:
        - set -euxo pipefail
        - pwd
        - ls
        - echo "Minimal build script is required for conda to set RECIPE_DIR"
    requirements:
      # Include the build dependencies and python to ensure the build string is correct
      build:
{%- if "ROOT_USE_CCACHE" in os.environ %}
        - ccache
{%- endif %}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - cmake
        - git
        - pkg-config
        - sed
        - make
        # Required for OpenGL support
        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl
        - {{ cdt('mesa-libgl-devel') }}  # [linux]
        - {{ cdt('mesa-dri-drivers') }}  # [linux]
        - {{ cdt('libselinux') }}  # [linux]
        - {{ cdt('libxdamage') }}  # [linux]
        - {{ cdt('libxxf86vm') }}  # [linux]
      host:
        - python
      run:
        - python
        - compilers  # This package is hostile to how conda-build manages compilers
        - metakernel
        - notebook
        - {{ pin_subpackage('root_base', exact=True) }}
        - {{ pin_subpackage('root-binaries', exact=True) }}
        - {{ pin_subpackage('root-dependencies', exact=True) }}
      run_constrained:
        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx]
    test:
      files:
        - test.cpp
        - test_pyroot.py
      requires:
        - ipython
      imports:
        - ROOT
        - JupyROOT
      commands: {{ test_commands() }}
        - ipython -c 'import JsMVA'
        # This command only works if the compilers are available
        - root -l -b -q -x test.cpp++

about:
  home: https://root.cern/
  license: LGPL-2.1-only
  license_family: LGPL
  license_file: root-source/LICENSE
  doc_url: https://root.cern/documentation
  dev_url: https://github.com/root-project/root/
  summary: |
      ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data
      processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other
      languages such as Python and R.
  description: |
      Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned
      on. Here are a few things to try:

      * `root`: you can start up a session and see the splash screen; Control-D to exit.
      * `python` followed by `import ROOT` will load PyROOT.
      * `root --notebook` will start a notebook server with a ROOT kernel choice.
      * `rootbrowse` will open a TBrowser session so you can look through files.
      * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.
      * `root -b -q -l -n -e "std::cout << TROOT::GetTutorialDir() << std::endl;"` will print the tutorial dir.
      * `root -b -l -q -e 'std::cout << (float) TPython::Eval("1+1") << endl;'` will run Python from C++ ROOT.

      See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.

      The ROOT package will prepare the required compilers. Everything in Conda is symlinked into
      `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`
      scripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.

      There is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid
      having a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available. In most cases users should use the `root` package directly, since it adds both of these, along with compilers, Jupyter, and a few other things to facilitate using ROOT or PyROOT.

      ROOT was built with and will report `-std=c++17` from `root-config`.

extra:
  recipe-maintainers:
    - chrisburr
    - henryiii
    - eguiraud
    - egpbos
